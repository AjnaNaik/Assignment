/* ###################################################################
**     Filename    : ProcessorExpert.c
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2022-10-19, 12:30, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file ProcessorExpert.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup ProcessorExpert_module ProcessorExpert module documentation
**  @{
*/         
/* MODULE ProcessorExpert */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "Display.h"

#include "BitsIoLdd1.h"
#include "Enable.h"
#include "BitIoLdd1.h"
#include "RS.h"
#include "BitIoLdd2.h"
#include "RW.h"
#include "BitIoLdd3.h"
#include "Row.h"
#include "BitsIoLdd2.h"
#include "Column.h"
#include "BitsIoLdd3.h"

/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

void LCD_Command(unsigned char command)
  {
	  Display_PutVal(command);
	  RS_PutVal(0);
	  RW_PutVal(0);
	  Enable_PutVal(1);
	  int j;
	  for(j=0;j<0x7fff;j++);
	  Enable_PutVal(0);
  }
  
  void LCD_Data(unsigned char data)
  {
	  Display_PutVal(data);
	  RS_PutVal(1);
	  RW_PutVal(0);
	  Enable_PutVal(1);
	  int j;
	  for(j=0;j<0x7fff;j++);
	  Enable_PutVal(0);  
  }
  
  void LCD_init()
    {
	  LCD_Command(0x01);
  	  LCD_Command(0x0F); 
  	  LCD_Command(0x38);  
  	  
  	  
  	  LCD_Command(0x06); 
  	  LCD_Command(0x80);
    }
  
void detectkey(){
	unsigned char x, y;
	Row_SetDir(1);
	Column_SetDir(1);
	Row_PutVal(0x0);
	Column_PutVal(0xF);

	Column_SetDir(0);
	x=Column_GetVal();
	//LCD_Command(0x80);
	
	
	Row_SetDir(1);
	Column_SetDir(1);
	Row_PutVal(0xF);
	Column_PutVal(0x0);
	
	Row_SetDir(0);
	y=Row_GetVal();
	//for(i=0;i<0x7FFFF;i++);
	

	
	if (x==0xE)
			{if(y==0x7){
				LCD_Data('a');
				
			}
			if(y==0xB){
							LCD_Data('b'); 
						
						}
			if(y==0xD){
							LCD_Data('c'); 
							
						}
			if(y==0xE){
							LCD_Data('d'); 
							
						}
	}
	
	if (x==0xD)
				{if(y==0x7){
					LCD_Data('e'); 
				}
				if(y==0xB){
								LCD_Data('f'); 
							}
				if(y==0xD){
								LCD_Data('g'); 
							}
				if(y==0xE){
								LCD_Data('h'); 
							}
		}
	if (x==0xB)
				{if(y==0x7){
					LCD_Data('i'); 
				}
				if(y==0xB){
								LCD_Data('j'); 
							}
				if(y==0xD){
								LCD_Data('k'); 
							}
				if(y==0xE){
								LCD_Data('l'); 
							}
		}
	if (x==0x7)
				{
				if(y==0xD){
					LCD_Command(0xC0);		
							}
				if(y==0xE){
									LCD_Command(0x10);
									LCD_Data(' '); 
									LCD_Command(0x10);
											}
				
		}
	
}
/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  LCD_init();
  
  while(1)
{
  /* Write your code here */

 detectkey();
 int j;
 for(j=0;j<0x7ffff;j++);
}


  /* For example: for(;;) { } */

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END ProcessorExpert */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
