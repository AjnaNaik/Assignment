/* ###################################################################
**     Filename    : ProcessorExpert.c
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2022-10-21, 12:23, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file ProcessorExpert.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup ProcessorExpert_module ProcessorExpert module documentation
**  @{
*/         
/* MODULE ProcessorExpert */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "lcd_display.h"
#include "BitsIoLdd1.h"
#include "RS.h"
#include "BitIoLdd1.h"
#include "RW.h"
#include "BitIoLdd2.h"
#include "enable.h"
#include "BitIoLdd3.h"
#include "set.h"
#include "BitIoLdd4.h"
#include "inc.h"
#include "BitIoLdd5.h"
#include "dec.h"
#include "BitIoLdd6.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

void LCD_Command(unsigned char command)
  {
	  lcd_display_PutVal(command);
	  RS_PutVal(0);
	  RW_PutVal(0);
	  enable_PutVal(1);
	  int j;
	  for(j=0;j<0x7fff;j++);
	  enable_PutVal(0);
  }
  
  void LCD_Data(unsigned char data)
  {
	  lcd_display_PutVal(data);
	  RS_PutVal(1);
	  RW_PutVal(0);
	  enable_PutVal(1);
	  int j;
	  for(j=0;j<0x7fff;j++);
	  enable_PutVal(0);  
  }
  
  void LCD_init()
    {
	  LCD_Command(0x01);
  	  LCD_Command(0x0F); 
 
    }
  
void incH()
  {
	  int j,h=0;
	  if (j<24)
	  {
		  if(inc_GetVal()==0)
		  {
			  h++;
		  }
	  }
  }
  int incX()
  {
	  int k,x=0;
	  for(k=0;k<60;k++)
	  {
		  if(inc_GetVal()==0)
		  {
			  x++;
		  }
		  return x;
	  }
	  
	  LCD_Command(0x06);
  }

  void run()
  {
	  
	  int hh,h1,h2,mm=00,m1,m2,ss,s1,s2,g;
	  int flag=1;

	  
	  LCD_Command(0x82);
	  LCD_Data(':');
	  LCD_Command(0x85);
	  LCD_Data(':');
	  	  
	  for(hh=01;hh<24;hh++){		
	  for(mm=01;mm<60;mm++){
	  			  for(ss=00;ss<20;ss++){
	  				 if (flag==1){
	  					 ss=incX();
	  				 }
	  				s1=ss%10;
					s2=ss/10;
					LCD_Command(0x86);
					LCD_Data(s2+48);
					LCD_Command(0x87);
					LCD_Data(s1+48);
					for(g=0;g<0xfffff;g++);
	  			  }
	  			m1=mm%10;
				m2=mm/10;
				LCD_Command(0x83);
				LCD_Data(m2+48);
				LCD_Command(0x84);
				LCD_Data(m1+48);                                                                 
				for(g=0;g<0x7fff;g++);
	  		  }
	h1=hh%10;
	h2=hh/10;
	LCD_Command(0x80);
	LCD_Data(h2+48);
	LCD_Command(0x81);
	LCD_Data(h1+48);
	for(g=0;g<0xfffff;g++);
	
    }	
  }
		
			

  /*int decH(int x)
  {
	  int j,h=0;
	  for(j=0;j<24;j++)
	  {
		  if(inc_GetVal()==0)
		  {
			  h++;
		  }
	  }
  }*/
/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  LCD_init();
  
  while(1)
{
	  
	/*int i;
	for(i=0;i<3;i++)
	{
		if(set_GetVal()==0)
		{
			if(i==0)
			{
				incH();
				
			}
			LCD_Command(0x06);
		}
		
	}*/
	if(set_GetVal()==0){
		{
			run();
		}
		}
			}



  /* For example: for(;;) { } */

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END ProcessorExpert */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
